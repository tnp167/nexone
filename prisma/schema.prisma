// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SELLER
}

model User {
  id      String @id @default(uuid())
  name    String
  email   String @unique
  picture String @db.Text
  role    Role   @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stores    Store[] @relation("UserStores")
  following Store[] @relation("UserFollowingStore")
}

model Category {
  id       String  @id @default(uuid())
  name     String
  image    String
  url      String  @unique
  featured Boolean @default(false)

  subCategories SubCategory[] @relation("CategoryToSubcategory")

  products Product[] @relation("CategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubCategory {
  id       String  @id @default(uuid())
  name     String
  image    String
  url      String  @unique
  featured Boolean @default(false)

  categoryId String
  category   Category @relation("CategoryToSubcategory", fields: [categoryId], references: [id])

  products Product[] @relation("SubCategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

enum StoreStatus {
  PENDING
  ACTIVE
  BANNED
  DISABLED
}

model Store {
  id                                   String      @id @default(uuid())
  name                                 String
  description                          String      @db.Text
  email                                String      @unique
  phone                                String
  url                                  String      @unique
  logo                                 String
  cover                                String
  status                               StoreStatus @default(PENDING)
  averageRating                        Float       @default(0)
  featured                             Boolean     @default(false)
  returnPolicy                         String      @default("Returns within 30 days of purchase.")
  defaultShippingService               String      @default("International Delivery")
  defaultShippingFeesPerItem           Float       @default(0)
  defaultShippingFeesForAdditionalItem Float       @default(0)
  defaultShippingFeePerKg              Float       @default(0)
  defaultShippingFeeFixed              Float       @default(0)
  defaultDeliveryTimeMin               Int         @default(7)
  defaultDeliveryTimeMax               Int         @default(31)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation("UserStores", fields: [userId], references: [id])

  products      Product[]      @relation("StoreToProduct")
  shippingRates ShippingRate[] @relation("StoreToShippingRate")
  followers     User[]         @relation("UserFollowingStore")

  @@index([userId])
}

enum ShippingFeeMethod {
  ITEM
  WEIGHT
  FIXED
}

model Product {
  id                String            @id @default(uuid())
  name              String
  description       String            @db.LongText
  slug              String            @unique
  brand             String
  rating            Float             @default(0)
  sales             Int               @default(0)
  shippingFeeMethod ShippingFeeMethod @default(ITEM)

  freeShipping FreeShipping? @relation("ProductToFreeShipping")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  storeId String
  store   Store  @relation("StoreToProduct", fields: [storeId], references: [id])

  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])

  subCategoryId String
  subCategory   SubCategory @relation("SubCategoryToProduct", fields: [subCategoryId], references: [id])

  offerTagId String?
  offerTag   OfferTag? @relation("OfferTagToProduct", fields: [offerTagId], references: [id])

  variants  ProductVariant[] @relation("ProductToProductVariant")
  specs     Spec[]           @relation("ProductToSpec")
  questions Question[]       @relation("ProductToQuestion")

  @@index([storeId])
  @@index([categoryId])
  @@index([subCategoryId])
}

model ProductVariant {
  id                 String  @id @default(uuid())
  variantName        String
  variantDescription String? @db.LongText
  variantImage       String
  slug               String  @unique
  isSale             Boolean @default(false)
  saleEndDate        String?
  keywords           String
  sku                String
  sales              Int     @default(0)
  weight             Float?

  productId String
  product   Product @relation("ProductToProductVariant", fields: [productId], references: [id])

  sizes  Size[]                @relation("ProductVariantToSizes")
  images ProductVariantImage[] @relation("ProductVariantToImage")
  colors Color[]               @relation("ProductVariantToColor")
  specs  Spec[]                @relation("ProductVariantToSpec")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
}

model Size {
  id       String @id @default(uuid())
  size     String
  quantity Int
  price    Int
  discount Float  @default(0)

  productVariantId String
  productVariant   ProductVariant @relation("ProductVariantToSizes", fields: [productVariantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productVariantId])
}

model ProductVariantImage {
  id  String @id @default(uuid())
  url String
  alt String @default("")

  productVariantId String
  productVariant   ProductVariant @relation("ProductVariantToImage", fields: [productVariantId], references: [id])

  @@index([productVariantId])
}

model Color {
  id   String @id @default(uuid())
  name String

  productVariantId String
  productVariant   ProductVariant @relation("ProductVariantToColor", fields: [productVariantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productVariantId])
}

model OfferTag {
  id   String @id @default(uuid())
  name String
  url  String @unique

  products Product[] @relation("OfferTagToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Spec {
  id    String @id @default(uuid())
  name  String
  value String

  productId String?
  product   Product? @relation("ProductToSpec", fields: [productId], references: [id])

  variantId String?
  variant   ProductVariant? @relation("ProductVariantToSpec", fields: [variantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
  @@index([variantId])
}

model Question {
  id       String @id @default(uuid())
  question String
  answer   String

  productId String
  product   Product @relation("ProductToQuestion", fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
}

model Country {
  id   String @id @default(uuid())
  name String @unique
  code String @unique

  shippingRates         ShippingRate[]        @relation("CountryToShippingRate")
  freeShippingCountries FreeShippingCountry[] @relation("FreeShippingToCountry")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ShippingRate {
  id String @id @default(uuid())

  shippingService              String
  shippingFeePerItem           Float
  shippingFeeForAdditionalItem Float
  shippingFeePerKg             Float
  shippingFeeFixed             Float
  deliveryTimeMin              Int
  deliveryTimeMax              Int
  returnPolicy                 String

  countryId String
  country   Country @relation("CountryToShippingRate", fields: [countryId], references: [id])

  storeId String
  store   Store  @relation("StoreToShippingRate", fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([countryId])
}

model FreeShipping {
  id        String  @id @default(uuid())
  productId String  @unique
  product   Product @relation("ProductToFreeShipping", fields: [productId], references: [id])

  eligibleCountries FreeShippingCountry[] @relation("FreeShippingCountry")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model FreeShippingCountry {
  id String @id @default(uuid())

  freeShippingId String
  freeShipping   FreeShipping @relation("FreeShippingCountry", fields: [freeShippingId], references: [id])

  countryId String
  country   Country @relation("FreeShippingToCountry", fields: [countryId], references: [id])

  @@index([freeShippingId])
  @@index([countryId])
}
