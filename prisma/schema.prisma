// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SELLER
}

model User {
  id      String @id @default(uuid())
  name    String
  email   String @unique
  picture String @db.Text
  role    Role   @default(USER)

  stores            Store[]           @relation("UserStores")
  following         Store[]           @relation("UserFollowingStore")
  reviews           Review[]          @relation("ReviewToUser")
  cart              Cart?             @relation("CartToUser")
  shippingAddresses ShippingAddress[] @relation("ShippingAddressToUser")
  orders            Order[]           @relation("OrderToUser")
  wishlist          Wishlist[]        @relation("WishlistToUser")
  paymentDetails    PaymentDetails[]  @relation("PaymentDetailsToUser")
  coupons           Coupon[]          @relation("CouponToUser")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String  @id @default(uuid())
  name     String
  image    String
  url      String  @unique
  featured Boolean @default(false)

  subCategories SubCategory[] @relation("CategoryToSubcategory")

  products Product[] @relation("CategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubCategory {
  id       String  @id @default(uuid())
  name     String
  image    String
  url      String  @unique
  featured Boolean @default(false)

  categoryId String
  category   Category @relation("CategoryToSubcategory", fields: [categoryId], references: [id])

  products Product[] @relation("SubCategoryToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

enum StoreStatus {
  PENDING
  ACTIVE
  BANNED
  DISABLED
}

model Store {
  id                                   String      @id @default(uuid())
  name                                 String
  description                          String      @db.Text
  email                                String      @unique
  phone                                String
  url                                  String      @unique
  logo                                 String
  cover                                String
  status                               StoreStatus @default(PENDING)
  averageRating                        Float       @default(0)
  featured                             Boolean     @default(false)
  returnPolicy                         String      @default("Returns within 30 days of purchase.")
  defaultShippingService               String      @default("International Delivery")
  defaultShippingFeesPerItem           Float       @default(0)
  defaultShippingFeesForAdditionalItem Float       @default(0)
  defaultShippingFeePerKg              Float       @default(0)
  defaultShippingFeeFixed              Float       @default(0)
  defaultDeliveryTimeMin               Int         @default(7)
  defaultDeliveryTimeMax               Int         @default(31)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation("UserStores", fields: [userId], references: [id])

  products      Product[]      @relation("StoreToProduct")
  shippingRates ShippingRate[] @relation("StoreToShippingRate")
  followers     User[]         @relation("UserFollowingStore")
  cartItems     CartItem[]     @relation("StoreToCartItem")
  orderGroups   OrderGroup[]   @relation("StoreToOrderGroup")
  coupons       Coupon[]       @relation("StoreToCoupon")

  @@index([userId])
}

enum ShippingFeeMethod {
  ITEM
  WEIGHT
  FIXED
}

model Product {
  id                String            @id @default(uuid())
  name              String
  description       String            @db.LongText
  slug              String            @unique
  brand             String
  rating            Float             @default(0)
  sales             Int               @default(0)
  numReviews        Int               @default(0)
  shippingFeeMethod ShippingFeeMethod @default(ITEM)

  freeShipping                FreeShipping? @relation("ProductToFreeShipping")
  freeShippingForAllCountries Boolean       @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  storeId String
  store   Store  @relation("StoreToProduct", fields: [storeId], references: [id])

  categoryId String
  category   Category @relation("CategoryToProduct", fields: [categoryId], references: [id])

  subCategoryId String
  subCategory   SubCategory @relation("SubCategoryToProduct", fields: [subCategoryId], references: [id])

  offerTagId String?
  offerTag   OfferTag? @relation("OfferTagToProduct", fields: [offerTagId], references: [id])

  variants  ProductVariant[] @relation("ProductToProductVariant")
  specs     Spec[]           @relation("ProductToSpec")
  questions Question[]       @relation("ProductToQuestion")
  reviews   Review[]         @relation("ReviewToProduct")
  wishlist  Wishlist[]       @relation("WishlistToProduct")

  @@index([storeId])
  @@index([categoryId])
  @@index([subCategoryId])
}

model ProductVariant {
  id                 String  @id @default(uuid())
  variantName        String
  variantDescription String? @db.LongText
  variantImage       String
  slug               String  @unique
  isSale             Boolean @default(false)
  saleEndDate        String?
  keywords           String
  sku                String
  sales              Int     @default(0)
  weight             Float?

  productId String
  product   Product @relation("ProductToProductVariant", fields: [productId], references: [id])

  sizes    Size[]                @relation("ProductVariantToSizes")
  images   ProductVariantImage[] @relation("ProductVariantToImage")
  colors   Color[]               @relation("ProductVariantToColor")
  specs    Spec[]                @relation("ProductVariantToSpec")
  wishlist Wishlist[]            @relation("WishlistToProductVariant")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
}

model Size {
  id       String @id @default(uuid())
  size     String
  quantity Int
  price    Int
  discount Float  @default(0)

  productVariantId String
  productVariant   ProductVariant @relation("ProductVariantToSizes", fields: [productVariantId], references: [id])

  wishlist  Wishlist[] @relation("WishlistToSize")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt

  @@index([productVariantId])
}

model ProductVariantImage {
  id  String @id @default(uuid())
  url String
  alt String @default("")

  productVariantId String
  productVariant   ProductVariant @relation("ProductVariantToImage", fields: [productVariantId], references: [id])

  @@index([productVariantId])
}

model Color {
  id   String @id @default(uuid())
  name String

  productVariantId String
  productVariant   ProductVariant @relation("ProductVariantToColor", fields: [productVariantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productVariantId])
}

model OfferTag {
  id   String @id @default(uuid())
  name String
  url  String @unique

  products Product[] @relation("OfferTagToProduct")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Spec {
  id    String @id @default(uuid())
  name  String
  value String

  productId String?
  product   Product? @relation("ProductToSpec", fields: [productId], references: [id])

  variantId String?
  variant   ProductVariant? @relation("ProductVariantToSpec", fields: [variantId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
  @@index([variantId])
}

model Question {
  id       String @id @default(uuid())
  question String
  answer   String

  productId String
  product   Product @relation("ProductToQuestion", fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
}

model Country {
  id   String @id @default(uuid())
  name String @unique
  code String @unique

  shippingRates         ShippingRate[]        @relation("CountryToShippingRate")
  freeShippingCountries FreeShippingCountry[] @relation("FreeShippingToCountry")
  shippingAddresses     ShippingAddress[]     @relation("ShippingAddressToCountry")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ShippingRate {
  id String @id @default(uuid())

  shippingService              String
  shippingFeePerItem           Float
  shippingFeeForAdditionalItem Float
  shippingFeePerKg             Float
  shippingFeeFixed             Float
  deliveryTimeMin              Int
  deliveryTimeMax              Int
  returnPolicy                 String

  countryId String
  country   Country @relation("CountryToShippingRate", fields: [countryId], references: [id])

  storeId String
  store   Store  @relation("StoreToShippingRate", fields: [storeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([countryId])
}

model FreeShipping {
  id        String  @id @default(uuid())
  productId String  @unique
  product   Product @relation("ProductToFreeShipping", fields: [productId], references: [id])

  eligibleCountries FreeShippingCountry[] @relation("FreeShippingCountry")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model FreeShippingCountry {
  id String @id @default(uuid())

  freeShippingId String
  freeShipping   FreeShipping @relation("FreeShippingCountry", fields: [freeShippingId], references: [id])

  countryId String
  country   Country @relation("FreeShippingToCountry", fields: [countryId], references: [id])

  @@index([freeShippingId])
  @@index([countryId])
}

model Review {
  id       String @id @default(uuid())
  variant  String
  review   String
  rating   Float
  color    String
  size     String
  quantity String
  likes    Int    @default(0)

  images ReviewImage[] @relation("ReviewToReviewImage")

  userId String
  user   User   @relation("ReviewToUser", fields: [userId], references: [id])

  productId String
  product   Product @relation("ReviewToProduct", fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
  @@index([productId])
}

model ReviewImage {
  id  String @id @default(uuid())
  url String
  alt String @default("")

  reviewId String
  review   Review @relation("ReviewToReviewImage", fields: [reviewId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([reviewId])
}

model Cart {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation("CartToUser", fields: [userId], references: [id], onDelete: Cascade)

  shippingFees Float @default(0)
  subTotal     Float
  total        Float

  couponId String?
  coupon   Coupon? @relation("CouponToCart", fields: [couponId], references: [id])

  cartItems CartItem[] @relation("CartToCartItem")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([couponId])
}

model CartItem {
  id          String @id @default(uuid())
  productId   String
  variantId   String
  sizeId      String
  productSlug String
  variantSlug String
  sku         String
  name        String
  image       String
  size        String
  price       Float
  quantity    Int    @default(1)
  shippingFee Float  @default(0)
  totalPrice  Float

  cartId String
  cart   Cart   @relation("CartToCartItem", fields: [cartId], references: [id], onDelete: Cascade)

  storeId String
  store   Store  @relation("StoreToCartItem", fields: [storeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([cartId])
  @@index([storeId])
}

model ShippingAddress {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  phone     String
  address1  String
  address2  String?
  city      String
  state     String
  zip_code  String
  default   Boolean @default(false)

  orders Order[] @relation("OrderToShippingAddress")
  userId String
  user   User    @relation("ShippingAddressToUser", fields: [userId], references: [id])

  countryId String
  country   Country @relation("ShippingAddressToCountry", fields: [countryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index(countryId)
  @@index(userId)
}

enum OrderStatus {
  Pending
  Confirmed
  Processing
  Shipped
  OutforDelivery
  Delivered
  Cancelled
  Failed
  Refunded
  Returned
  PartiallyShipped
  OnHold
}

enum PaymentStatus {
  Pending
  Paid
  Failed
  Declined
  Cancelled
  Refunded
  PartiallyRefunded
  Chargeback
}

enum PaymentMethod {
  Card
  Stripe
}

model Order {
  id           String @id @default(uuid())
  shippingFees Float
  subTotal     Float
  total        Float

  groups OrderGroup[] @relation("OrderGroupToOrder")

  orderStatus   OrderStatus   @default(Pending)
  paymentStatus PaymentStatus @default(Pending)

  paymentMethod  PaymentMethod?
  paymentDetails PaymentDetails? @relation("PaymentDetailsToOrder")

  shippingAddressId String
  shippingAddress   ShippingAddress @relation("OrderToShippingAddress", fields: [shippingAddressId], references: [id])

  userId String
  user   User   @relation("OrderToUser", fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([shippingAddressId])
  @@index([userId])
}

model OrderGroup {
  id     String      @id @default(uuid())
  status OrderStatus @default(Pending)

  items OrderItem[] @relation("OrderGroupToOrderItem")

  shippingService     String
  shippingDeliveryMin Int
  shippingDeliveryMax Int

  shippingFees Float
  subTotal     Float
  total        Float

  orderId String
  order   Order  @relation("OrderGroupToOrder", fields: [orderId], references: [id])

  storeId String
  store   Store  @relation("StoreToOrderGroup", fields: [storeId], references: [id])

  couponId String?
  coupon   Coupon? @relation("CouponToOrderGroup", fields: [couponId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([orderId])
  @@index([storeId])
  @@index([couponId])
}

enum ProductStatus {
  /// Product has been added to the order but no action taken yet
  Pending

  /// Product is being prepared (picked, packed, or manufactured)
  Processing

  /// Product is packed and ready for shipment
  ReadyForShipment

  /// Product has been shipped
  Shipped

  /// Product has been delivered to the customer
  Delivered

  /// Product order has been canceled
  Canceled

  /// Product has been returned by the customer
  Returned

  /// Product cost has been refunded
  Refunded

  /// Delivery attempt failed, product may return to warehouse
  FailedDelivery

  /// Product is on hold (e.g., stock issues, verification required)
  OnHold

  /// Product is delayed due to stock unavailability
  Backordered

  /// Some units of the product were shipped, but the order is not yet complete
  PartiallyShipped

  /// Customer requested an exchange for the product
  ExchangeRequested

  /// Product is awaiting customer pickup (for pickup orders)
  AwaitingPickup
}

model OrderItem {
  id String @id @default(uuid())

  productId String
  variantId String
  sizeId    String

  productSlug String
  variantSlug String
  sku         String
  name        String
  image       String
  size        String
  quantity    Int    @default(1)
  shippingFee Float  @default(0)
  price       Float
  totalPrice  Float

  orderGroupId String
  orderGroup   OrderGroup @relation("OrderGroupToOrderItem", fields: [orderGroupId], references: [id], onDelete: Cascade)

  status ProductStatus @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([productId])
  @@index([variantId])
  @@index([orderGroupId])
}

model Wishlist {
  id String @id @default(uuid())

  userId String
  user   User   @relation("WishlistToUser", fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation("WishlistToProduct", fields: [productId], references: [id], onDelete: Cascade)

  variantId String
  variant   ProductVariant @relation("WishlistToProductVariant", fields: [variantId], references: [id], onDelete: Cascade)

  sizeId String?
  size   Size?   @relation("WishlistToSize", fields: [sizeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
  @@index([productId])
  @@index([variantId])
  @@index([sizeId])
}

model Coupon {
  id        String @id @default(uuid())
  code      String @unique
  startDate String
  endDate   String
  discount  Int

  storeId String
  store   Store  @relation("StoreToCoupon", fields: [storeId], references: [id])

  orders OrderGroup[] @relation("CouponToOrderGroup")
  users  User[]       @relation("CouponToUser")

  carts Cart[] @relation("CouponToCart")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([storeId])
}

model PaymentDetails {
  id              String @id @default(uuid())
  paymentIntentId String
  paymentMethod   String
  status          String
  amount          Float
  currency        String

  orderId String @unique
  order   Order  @relation("PaymentDetailsToOrder", fields: [orderId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation("PaymentDetailsToUser", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([orderId])
  @@index([userId])
}
